CREATE SCHEMA IF NOT EXISTS spatial;
CREATE EXTENSION IF NOT EXISTS postgis SCHEMA spatial;

CREATE TYPE user_role AS ENUM ('admin', 'data_manager', 'data_collector', 'pending');
CREATE TYPE gender AS ENUM ('male', 'female', 'other');
CREATE TYPE verification_status AS ENUM ('pending', 'approved', 'rejected');
CREATE TYPE semester AS ENUM ('first', 'second');
CREATE TYPE irrigation_supply AS ENUM ('Not Enough', 'Not Sufficient', 'Sufficient', 'Excessive');

create type activity_type as enum (
  'field-data',
  'cultural-management',
  'nutrient-management',
  'crop_cut',
  'production',
  'monitoring-visit',
  'damage-assessment',
  'rice-non-rice'
);

create type harvest_method as enum ('Manual', 'Mechanical');

create table users (
  id            uuid references auth.users not null primary key,
  role          user_role not null,
  first_name    text not null,
  last_name     text not null,
  date_of_birth date not null,
  created_at    timestamptz default now() not null,
  updated_at    timestamptz default now() not null
);


create table provinces (
  id                    int generated by default as identity primary key,
  code                  text not null unique,
  name                  text not null
);


create table cities_municipalities (
  id                    int generated by default as identity primary key,
  province_id           int not null references provinces(id),
  code                  text not null unique,
  name                  text not null
);
create index idx_cities_province_id on cities_municipalities using btree (province_id);


create table barangays (
  id                    int generated by default as identity primary key,
  city_municipality_id  int not null references cities_municipalities(id),
  code                  text not null unique,
  name                  text not null
);
create index idx_barangays_city_municipality_id on barangays using btree (city_municipality_id);


create table farmers (
  id                    int generated by default as identity primary key,
  first_name            text not null,
  last_name             text not null,
  gender                gender not null,
  date_of_birth         date not null,
  cellphone_no          text not null,
  created_at            timestamptz not null default now(),
  updated_at            timestamptz not null default now()
);

create table fields (
  id                    int generated by default as identity primary key,
  farmer_id             int not null references farmers(id),
  barangay_id           int not null references barangays(id),
  mfid                  text not null unique,
  location              spatial.geometry(Point, 4326) not null,
  created_at            timestamptz not null default now(),
  updated_at            timestamptz not null default now()
);
create index idx_fields_farmer_id on fields using btree (farmer_id);
create index idx_fields_location on fields using gist (location);
create index idx_fields_barangay_id on fields using btree (barangay_id);


create table seasons (
  id           int generated by default as identity primary key,
  start_date   date not null,
  end_date     date not null,
  semester     semester not null,
  season_year  text not null,
  unique (start_date, end_date)
);
create index idx_seasons_start_date on seasons (start_date);
create index idx_seasons_semester on seasons (semester);

create table field_activities ( -- parent table for all forms
  id                    int generated by default as identity primary key,
  field_id              int not null references fields(id),
  season_id             int not null references seasons(id),
  activity_type         activity_type not null,
  collected_by          uuid not null references users(id),   -- data_collector
  verified_by           uuid null references users(id),       -- data_manager
  verification_status   verification_status not null default 'pending',
  remarks               text null,
  image_urls            jsonb not null check (jsonb_typeof(image_urls) = 'array'),
  collected_at          timestamptz not null default now(),   -- actual date of gathering
  updated_at            timestamptz not null default now(),
  verified_at           timestamptz null,
  synced_at             timestamptz null,

  unique(field_id, season_id, activity_type)
);
create index idx_fa_field_id on field_activities using btree (field_id);
create index idx_fa_season_id on field_activities using btree (season_id);
create index idx_field_activities_season_field on field_activities (season_id, field_id);
create index idx_fa_season_activity_type on field_activities (season_id, activity_type);
CREATE INDEX idx_fa_field_data_id ON field_activities(id) WHERE activity_type = 'field-data';
CREATE INDEX idx_fa_cultural_management_id ON field_activities(id) WHERE activity_type = 'cultural-management';
CREATE INDEX idx_fa_nutrient_management_id ON field_activities(id) WHERE activity_type = 'nutrient-management';
CREATE INDEX idx_fa_crop_cut_id ON field_activities(id) WHERE activity_type = 'crop_cut';
CREATE INDEX idx_fa_production_id ON field_activities(id) WHERE activity_type = 'production';
CREATE INDEX idx_fa_monitoring_visit_id ON field_activities(id) WHERE activity_type = 'monitoring-visit';
CREATE INDEX idx_fa_damage_assessment_id ON field_activities(id) WHERE activity_type = 'damage-assessment';
create index idx_fa_collected_by on field_activities using btree (collected_by);
create index idx_fa_verified_by on field_activities using btree (verified_by);
create index idx_fa_collected_at on field_activities using btree (collected_at);
create index idx_fa_verification_status_pending on field_activities using btree (verification_status) where verification_status = 'pending';
create index idx_fa_image_urls_gin on field_activities using gin (image_urls jsonb_path_ops);


create table field_plannings ( -- form 1
  id                                int primary key references field_activities(id) unique,
  land_preparation_start_date       date not null,
  est_crop_establishment_date       date not null,
  est_crop_establishment_method     text not null,
  total_field_area_ha               double precision not null,
  ecosystem                         text not null,
  soil_type                         text not null,
  current_field_condition           text not null,
  crop_planted                      text not null,
  crop_status                       text not null
);
create index idx_fp_prep_start_date on field_plannings(land_preparation_start_date);
create index idx_fp_establish_date on field_plannings(est_crop_establishment_date);

create table crop_establishments ( -- form 2
  id                                int primary key references field_activities(id) unique,

  -- min. 400sqm, can be equal but not greater than total_field_area_ha in field_plannings
  monitoring_field_area_sqm         double precision not null,

  actual_land_preparation_method    text not null,
  actual_crop_establishment_date    date not null,
  actual_crop_establishment_method  text not null,

  -- if transplanted
  sowing_date                       date null,
  seedling_age_at_transplanting     smallint null check (seedling_age_at_transplanting between 1 and 100),
  distance_between_plant_row_1      double precision null,
  distance_between_plant_row_2      double precision null,
  distance_between_plant_row_3      double precision null,
  distance_within_plant_row_1       double precision null,
  distance_within_plant_row_2       double precision null,
  distance_within_plant_row_3       double precision null,

  -- if direct-seeded
  seeding_rate_kg_ha                double precision null,
  direct_seeding_method             text null,
  num_plants_1                      smallint null,
  num_plants_2                      smallint null,
  num_plants_3                      smallint null,

  rice_variety                      text not null,
  rice_variety_no                   text null,
  rice_variety_maturity_duration    smallint not null,
  seed_class                        text not null,
  -- source_of_seed                    text not null, -- seed_producer, etc.

  crop_growth_stage                 text not null -- flowering, tillering, etc.
);
create index idx_ce_actual_date on crop_establishments(actual_crop_establishment_date);
create index idx_ce_variety on crop_establishments(rice_variety);

create table fertilization_records ( -- form 3
  id                                int primary key references field_activities(id) unique,
  applied_area_sqm                  double precision not null
);
create index idx_fr_id on fertilization_records using btree (id);


create table fertilizer_applications ( -- form 3.1
  id                                int generated by default as identity primary key,
  fertilization_record_id           int not null references fertilization_records(id),

  fertilizer_type                   text not null, -- organic, inorganic
  brand                             text not null,

  nitrogen_content_pct              double precision not null,
  phosphorus_content_pct            double precision not null,
  potassium_content_pct             double precision not null,

  amount_applied                    double precision not null,
  amount_unit                       text not null, -- kg, g, etc.

  crop_stage_on_application         text not null -- flowering, etc.
);
create index idx_fa_records_id on fertilizer_applications(fertilization_record_id);

create table harvest_records ( -- form 4
  id                                int primary key references field_activities(id) unique,

  harvest_date                      date not null,
  harvesting_method                 harvest_method not null,
  bags_harvested                    int not null,
  avg_bag_weight_kg                 double precision not null,

  -- min. 0.04ha, can be equal but not greater than total_field_area_ha in field_plannings
  area_harvested                    double precision not null,
  irrigation_supply                 irrigation_supply not null
);
create index idx_hr_harvest_date on harvest_records(harvest_date);

create table damage_assessments( -- form 5
  id                                int primary key references field_activities(id) unique,
  cause                             text not null,
  crop_stage                        text not null,
  soil_type                         text not null,
  severity                          text not null,
  affected_area_ha                  double precision not null,
  observed_pest                     text null
);

create table monitoring_visits ( -- form 6
  id                                int primary key references field_activities(id) unique,
  date_monitored                    date not null,
  crop_stage                        text not null,
  soil_moisture_status              text not null,
  avg_plant_height                  double precision null
);
