/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../../../routes/__root'
import { Route as UnauthorizedRouteImport } from './../../../routes/unauthorized'
import { Route as LoginRouteImport } from './../../../routes/login'
import { Route as Data_collectorRouteImport } from './../../../routes/data_collector'
import { Route as AdminRouteImport } from './../../../routes/admin'
import { Route as ManagerRouteImport } from './../../../routes/_manager'
import { Route as R404RouteImport } from './../../../routes/404'
import { Route as IndexRouteImport } from './../../../routes/index'
import { Route as AdminUser_managementRouteImport } from './../../../routes/admin/user_management'
import { Route as AdminSettingsRouteImport } from './../../../routes/admin/settings'
import { Route as AdminSecurityRouteImport } from './../../../routes/admin/security'
import { Route as AdminReportsRouteImport } from './../../../routes/admin/reports'
import { Route as AdminMaintenanceRouteImport } from './../../../routes/admin/maintenance'
import { Route as AdminDashboardRouteImport } from './../../../routes/admin/dashboard'
import { Route as ManagerMonitored_fieldsRouteImport } from './../../../routes/_manager/monitored_fields'
import { Route as ManagerDashboardRouteImport } from './../../../routes/_manager/dashboard'
import { Route as ManagerFormsRiceNonRiceRouteImport } from './../../../routes/_manager/_forms/riceNonRice'
import { Route as ManagerFormsProductionRouteImport } from './../../../routes/_manager/_forms/production'
import { Route as ManagerFormsNutrientManagementRouteImport } from './../../../routes/_manager/_forms/nutrientManagement'
import { Route as ManagerFormsMonitoringRouteImport } from './../../../routes/_manager/_forms/monitoring'
import { Route as ManagerFormsFieldDataRouteImport } from './../../../routes/_manager/_forms/fieldData'
import { Route as ManagerFormsDamageAssessmentRouteImport } from './../../../routes/_manager/_forms/damageAssessment'
import { Route as ManagerFormsCulturalManagementRouteImport } from './../../../routes/_manager/_forms/culturalManagement'
import { Route as ManagerFormsOverviewRouteImport } from './../../../routes/_manager/_forms/_overview'
import { Route as ManagerAnalyticsPredictiveRouteImport } from './../../../routes/_manager/_analytics/predictive'
import { Route as ManagerAnalyticsDescriptiveRouteImport } from './../../../routes/_manager/_analytics/descriptive'
import { Route as ManagerAnalyticsComparativeRouteImport } from './../../../routes/_manager/_analytics/comparative'

const UnauthorizedRoute = UnauthorizedRouteImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const Data_collectorRoute = Data_collectorRouteImport.update({
  id: '/data_collector',
  path: '/data_collector',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerRoute = ManagerRouteImport.update({
  id: '/_manager',
  getParentRoute: () => rootRouteImport,
} as any)
const R404Route = R404RouteImport.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminUser_managementRoute = AdminUser_managementRouteImport.update({
  id: '/user_management',
  path: '/user_management',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSettingsRoute = AdminSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AdminRoute,
} as any)
const AdminSecurityRoute = AdminSecurityRouteImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => AdminRoute,
} as any)
const AdminReportsRoute = AdminReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => AdminRoute,
} as any)
const AdminMaintenanceRoute = AdminMaintenanceRouteImport.update({
  id: '/maintenance',
  path: '/maintenance',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const ManagerMonitored_fieldsRoute = ManagerMonitored_fieldsRouteImport.update({
  id: '/monitored_fields',
  path: '/monitored_fields',
  getParentRoute: () => ManagerRoute,
} as any)
const ManagerDashboardRoute = ManagerDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ManagerRoute,
} as any)
const ManagerFormsRiceNonRiceRoute = ManagerFormsRiceNonRiceRouteImport.update({
  id: '/_forms/riceNonRice',
  path: '/riceNonRice',
  getParentRoute: () => ManagerRoute,
} as any)
const ManagerFormsProductionRoute = ManagerFormsProductionRouteImport.update({
  id: '/_forms/production',
  path: '/production',
  getParentRoute: () => ManagerRoute,
} as any)
const ManagerFormsNutrientManagementRoute =
  ManagerFormsNutrientManagementRouteImport.update({
    id: '/_forms/nutrientManagement',
    path: '/nutrientManagement',
    getParentRoute: () => ManagerRoute,
  } as any)
const ManagerFormsMonitoringRoute = ManagerFormsMonitoringRouteImport.update({
  id: '/_forms/monitoring',
  path: '/monitoring',
  getParentRoute: () => ManagerRoute,
} as any)
const ManagerFormsFieldDataRoute = ManagerFormsFieldDataRouteImport.update({
  id: '/_forms/fieldData',
  path: '/fieldData',
  getParentRoute: () => ManagerRoute,
} as any)
const ManagerFormsDamageAssessmentRoute =
  ManagerFormsDamageAssessmentRouteImport.update({
    id: '/_forms/damageAssessment',
    path: '/damageAssessment',
    getParentRoute: () => ManagerRoute,
  } as any)
const ManagerFormsCulturalManagementRoute =
  ManagerFormsCulturalManagementRouteImport.update({
    id: '/_forms/culturalManagement',
    path: '/culturalManagement',
    getParentRoute: () => ManagerRoute,
  } as any)
const ManagerFormsOverviewRoute = ManagerFormsOverviewRouteImport.update({
  id: '/_forms/_overview',
  getParentRoute: () => ManagerRoute,
} as any)
const ManagerAnalyticsPredictiveRoute =
  ManagerAnalyticsPredictiveRouteImport.update({
    id: '/_analytics/predictive',
    path: '/predictive',
    getParentRoute: () => ManagerRoute,
  } as any)
const ManagerAnalyticsDescriptiveRoute =
  ManagerAnalyticsDescriptiveRouteImport.update({
    id: '/_analytics/descriptive',
    path: '/descriptive',
    getParentRoute: () => ManagerRoute,
  } as any)
const ManagerAnalyticsComparativeRoute =
  ManagerAnalyticsComparativeRouteImport.update({
    id: '/_analytics/comparative',
    path: '/comparative',
    getParentRoute: () => ManagerRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/admin': typeof AdminRouteWithChildren
  '/data_collector': typeof Data_collectorRoute
  '/login': typeof LoginRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/dashboard': typeof ManagerDashboardRoute
  '/monitored_fields': typeof ManagerMonitored_fieldsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/maintenance': typeof AdminMaintenanceRoute
  '/admin/reports': typeof AdminReportsRoute
  '/admin/security': typeof AdminSecurityRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/user_management': typeof AdminUser_managementRoute
  '/comparative': typeof ManagerAnalyticsComparativeRoute
  '/descriptive': typeof ManagerAnalyticsDescriptiveRoute
  '/predictive': typeof ManagerAnalyticsPredictiveRoute
  '/culturalManagement': typeof ManagerFormsCulturalManagementRoute
  '/damageAssessment': typeof ManagerFormsDamageAssessmentRoute
  '/fieldData': typeof ManagerFormsFieldDataRoute
  '/monitoring': typeof ManagerFormsMonitoringRoute
  '/nutrientManagement': typeof ManagerFormsNutrientManagementRoute
  '/production': typeof ManagerFormsProductionRoute
  '/riceNonRice': typeof ManagerFormsRiceNonRiceRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/admin': typeof AdminRouteWithChildren
  '/data_collector': typeof Data_collectorRoute
  '/login': typeof LoginRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/dashboard': typeof ManagerDashboardRoute
  '/monitored_fields': typeof ManagerMonitored_fieldsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/maintenance': typeof AdminMaintenanceRoute
  '/admin/reports': typeof AdminReportsRoute
  '/admin/security': typeof AdminSecurityRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/user_management': typeof AdminUser_managementRoute
  '/comparative': typeof ManagerAnalyticsComparativeRoute
  '/descriptive': typeof ManagerAnalyticsDescriptiveRoute
  '/predictive': typeof ManagerAnalyticsPredictiveRoute
  '/culturalManagement': typeof ManagerFormsCulturalManagementRoute
  '/damageAssessment': typeof ManagerFormsDamageAssessmentRoute
  '/fieldData': typeof ManagerFormsFieldDataRoute
  '/monitoring': typeof ManagerFormsMonitoringRoute
  '/nutrientManagement': typeof ManagerFormsNutrientManagementRoute
  '/production': typeof ManagerFormsProductionRoute
  '/riceNonRice': typeof ManagerFormsRiceNonRiceRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/_manager': typeof ManagerRouteWithChildren
  '/admin': typeof AdminRouteWithChildren
  '/data_collector': typeof Data_collectorRoute
  '/login': typeof LoginRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/_manager/dashboard': typeof ManagerDashboardRoute
  '/_manager/monitored_fields': typeof ManagerMonitored_fieldsRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/maintenance': typeof AdminMaintenanceRoute
  '/admin/reports': typeof AdminReportsRoute
  '/admin/security': typeof AdminSecurityRoute
  '/admin/settings': typeof AdminSettingsRoute
  '/admin/user_management': typeof AdminUser_managementRoute
  '/_manager/_analytics/comparative': typeof ManagerAnalyticsComparativeRoute
  '/_manager/_analytics/descriptive': typeof ManagerAnalyticsDescriptiveRoute
  '/_manager/_analytics/predictive': typeof ManagerAnalyticsPredictiveRoute
  '/_manager/_forms/_overview': typeof ManagerFormsOverviewRoute
  '/_manager/_forms/culturalManagement': typeof ManagerFormsCulturalManagementRoute
  '/_manager/_forms/damageAssessment': typeof ManagerFormsDamageAssessmentRoute
  '/_manager/_forms/fieldData': typeof ManagerFormsFieldDataRoute
  '/_manager/_forms/monitoring': typeof ManagerFormsMonitoringRoute
  '/_manager/_forms/nutrientManagement': typeof ManagerFormsNutrientManagementRoute
  '/_manager/_forms/production': typeof ManagerFormsProductionRoute
  '/_manager/_forms/riceNonRice': typeof ManagerFormsRiceNonRiceRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/404'
    | '/admin'
    | '/data_collector'
    | '/login'
    | '/unauthorized'
    | '/dashboard'
    | '/monitored_fields'
    | '/admin/dashboard'
    | '/admin/maintenance'
    | '/admin/reports'
    | '/admin/security'
    | '/admin/settings'
    | '/admin/user_management'
    | '/comparative'
    | '/descriptive'
    | '/predictive'
    | '/culturalManagement'
    | '/damageAssessment'
    | '/fieldData'
    | '/monitoring'
    | '/nutrientManagement'
    | '/production'
    | '/riceNonRice'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/404'
    | '/admin'
    | '/data_collector'
    | '/login'
    | '/unauthorized'
    | '/dashboard'
    | '/monitored_fields'
    | '/admin/dashboard'
    | '/admin/maintenance'
    | '/admin/reports'
    | '/admin/security'
    | '/admin/settings'
    | '/admin/user_management'
    | '/comparative'
    | '/descriptive'
    | '/predictive'
    | '/culturalManagement'
    | '/damageAssessment'
    | '/fieldData'
    | '/monitoring'
    | '/nutrientManagement'
    | '/production'
    | '/riceNonRice'
  id:
    | '__root__'
    | '/'
    | '/404'
    | '/_manager'
    | '/admin'
    | '/data_collector'
    | '/login'
    | '/unauthorized'
    | '/_manager/dashboard'
    | '/_manager/monitored_fields'
    | '/admin/dashboard'
    | '/admin/maintenance'
    | '/admin/reports'
    | '/admin/security'
    | '/admin/settings'
    | '/admin/user_management'
    | '/_manager/_analytics/comparative'
    | '/_manager/_analytics/descriptive'
    | '/_manager/_analytics/predictive'
    | '/_manager/_forms/_overview'
    | '/_manager/_forms/culturalManagement'
    | '/_manager/_forms/damageAssessment'
    | '/_manager/_forms/fieldData'
    | '/_manager/_forms/monitoring'
    | '/_manager/_forms/nutrientManagement'
    | '/_manager/_forms/production'
    | '/_manager/_forms/riceNonRice'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R404Route: typeof R404Route
  ManagerRoute: typeof ManagerRouteWithChildren
  AdminRoute: typeof AdminRouteWithChildren
  Data_collectorRoute: typeof Data_collectorRoute
  LoginRoute: typeof LoginRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/data_collector': {
      id: '/data_collector'
      path: '/data_collector'
      fullPath: '/data_collector'
      preLoaderRoute: typeof Data_collectorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_manager': {
      id: '/_manager'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ManagerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/user_management': {
      id: '/admin/user_management'
      path: '/user_management'
      fullPath: '/admin/user_management'
      preLoaderRoute: typeof AdminUser_managementRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/settings': {
      id: '/admin/settings'
      path: '/settings'
      fullPath: '/admin/settings'
      preLoaderRoute: typeof AdminSettingsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/security': {
      id: '/admin/security'
      path: '/security'
      fullPath: '/admin/security'
      preLoaderRoute: typeof AdminSecurityRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/reports': {
      id: '/admin/reports'
      path: '/reports'
      fullPath: '/admin/reports'
      preLoaderRoute: typeof AdminReportsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/maintenance': {
      id: '/admin/maintenance'
      path: '/maintenance'
      fullPath: '/admin/maintenance'
      preLoaderRoute: typeof AdminMaintenanceRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_manager/monitored_fields': {
      id: '/_manager/monitored_fields'
      path: '/monitored_fields'
      fullPath: '/monitored_fields'
      preLoaderRoute: typeof ManagerMonitored_fieldsRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/dashboard': {
      id: '/_manager/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ManagerDashboardRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/_forms/riceNonRice': {
      id: '/_manager/_forms/riceNonRice'
      path: '/riceNonRice'
      fullPath: '/riceNonRice'
      preLoaderRoute: typeof ManagerFormsRiceNonRiceRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/_forms/production': {
      id: '/_manager/_forms/production'
      path: '/production'
      fullPath: '/production'
      preLoaderRoute: typeof ManagerFormsProductionRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/_forms/nutrientManagement': {
      id: '/_manager/_forms/nutrientManagement'
      path: '/nutrientManagement'
      fullPath: '/nutrientManagement'
      preLoaderRoute: typeof ManagerFormsNutrientManagementRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/_forms/monitoring': {
      id: '/_manager/_forms/monitoring'
      path: '/monitoring'
      fullPath: '/monitoring'
      preLoaderRoute: typeof ManagerFormsMonitoringRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/_forms/fieldData': {
      id: '/_manager/_forms/fieldData'
      path: '/fieldData'
      fullPath: '/fieldData'
      preLoaderRoute: typeof ManagerFormsFieldDataRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/_forms/damageAssessment': {
      id: '/_manager/_forms/damageAssessment'
      path: '/damageAssessment'
      fullPath: '/damageAssessment'
      preLoaderRoute: typeof ManagerFormsDamageAssessmentRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/_forms/culturalManagement': {
      id: '/_manager/_forms/culturalManagement'
      path: '/culturalManagement'
      fullPath: '/culturalManagement'
      preLoaderRoute: typeof ManagerFormsCulturalManagementRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/_forms/_overview': {
      id: '/_manager/_forms/_overview'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ManagerFormsOverviewRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/_analytics/predictive': {
      id: '/_manager/_analytics/predictive'
      path: '/predictive'
      fullPath: '/predictive'
      preLoaderRoute: typeof ManagerAnalyticsPredictiveRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/_analytics/descriptive': {
      id: '/_manager/_analytics/descriptive'
      path: '/descriptive'
      fullPath: '/descriptive'
      preLoaderRoute: typeof ManagerAnalyticsDescriptiveRouteImport
      parentRoute: typeof ManagerRoute
    }
    '/_manager/_analytics/comparative': {
      id: '/_manager/_analytics/comparative'
      path: '/comparative'
      fullPath: '/comparative'
      preLoaderRoute: typeof ManagerAnalyticsComparativeRouteImport
      parentRoute: typeof ManagerRoute
    }
  }
}

interface ManagerRouteChildren {
  ManagerDashboardRoute: typeof ManagerDashboardRoute
  ManagerMonitored_fieldsRoute: typeof ManagerMonitored_fieldsRoute
  ManagerAnalyticsComparativeRoute: typeof ManagerAnalyticsComparativeRoute
  ManagerAnalyticsDescriptiveRoute: typeof ManagerAnalyticsDescriptiveRoute
  ManagerAnalyticsPredictiveRoute: typeof ManagerAnalyticsPredictiveRoute
  ManagerFormsOverviewRoute: typeof ManagerFormsOverviewRoute
  ManagerFormsCulturalManagementRoute: typeof ManagerFormsCulturalManagementRoute
  ManagerFormsDamageAssessmentRoute: typeof ManagerFormsDamageAssessmentRoute
  ManagerFormsFieldDataRoute: typeof ManagerFormsFieldDataRoute
  ManagerFormsMonitoringRoute: typeof ManagerFormsMonitoringRoute
  ManagerFormsNutrientManagementRoute: typeof ManagerFormsNutrientManagementRoute
  ManagerFormsProductionRoute: typeof ManagerFormsProductionRoute
  ManagerFormsRiceNonRiceRoute: typeof ManagerFormsRiceNonRiceRoute
}

const ManagerRouteChildren: ManagerRouteChildren = {
  ManagerDashboardRoute: ManagerDashboardRoute,
  ManagerMonitored_fieldsRoute: ManagerMonitored_fieldsRoute,
  ManagerAnalyticsComparativeRoute: ManagerAnalyticsComparativeRoute,
  ManagerAnalyticsDescriptiveRoute: ManagerAnalyticsDescriptiveRoute,
  ManagerAnalyticsPredictiveRoute: ManagerAnalyticsPredictiveRoute,
  ManagerFormsOverviewRoute: ManagerFormsOverviewRoute,
  ManagerFormsCulturalManagementRoute: ManagerFormsCulturalManagementRoute,
  ManagerFormsDamageAssessmentRoute: ManagerFormsDamageAssessmentRoute,
  ManagerFormsFieldDataRoute: ManagerFormsFieldDataRoute,
  ManagerFormsMonitoringRoute: ManagerFormsMonitoringRoute,
  ManagerFormsNutrientManagementRoute: ManagerFormsNutrientManagementRoute,
  ManagerFormsProductionRoute: ManagerFormsProductionRoute,
  ManagerFormsRiceNonRiceRoute: ManagerFormsRiceNonRiceRoute,
}

const ManagerRouteWithChildren =
  ManagerRoute._addFileChildren(ManagerRouteChildren)

interface AdminRouteChildren {
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminMaintenanceRoute: typeof AdminMaintenanceRoute
  AdminReportsRoute: typeof AdminReportsRoute
  AdminSecurityRoute: typeof AdminSecurityRoute
  AdminSettingsRoute: typeof AdminSettingsRoute
  AdminUser_managementRoute: typeof AdminUser_managementRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminDashboardRoute: AdminDashboardRoute,
  AdminMaintenanceRoute: AdminMaintenanceRoute,
  AdminReportsRoute: AdminReportsRoute,
  AdminSecurityRoute: AdminSecurityRoute,
  AdminSettingsRoute: AdminSettingsRoute,
  AdminUser_managementRoute: AdminUser_managementRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R404Route: R404Route,
  ManagerRoute: ManagerRouteWithChildren,
  AdminRoute: AdminRouteWithChildren,
  Data_collectorRoute: Data_collectorRoute,
  LoginRoute: LoginRoute,
  UnauthorizedRoute: UnauthorizedRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
